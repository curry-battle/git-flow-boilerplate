name: Create Release PR

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Type of version bump (major, minor, patch)'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  create-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code including full history for tag comparison
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch latest tags (explicitly)
        run: git fetch --tags origin

      - name: Get latest semantic version tag
        id: latest
        run: |
          # get the latest semantic version tag
          # e.g. v1.2.3, v2.0.0
          tag=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n 1)
          if [ -z "$tag" ]; then
            echo "::notice::No previous semantic version tag (vX.Y.Z) found. Assuming v0.0.0"
            tag="v0.0.0"
          else
            echo "::info::Found latest semantic version tag: $tag"
          fi
          echo "latest_tag=$tag" >> $GITHUB_OUTPUT

          # Extract major, minor, and patch version numbers
          version=${tag#v}  # Remove 'v' prefix
          IFS='.' read -r major minor patch <<< "$version"
          echo "major=$major" >> $GITHUB_OUTPUT
          echo "minor=$minor" >> $GITHUB_OUTPUT
          echo "patch=$patch" >> $GITHUB_OUTPUT
        shell: bash

      - name: Calculate next version
        id: version
        run: |
          major=${{ steps.latest.outputs.major }}
          minor=${{ steps.latest.outputs.minor }}
          patch=${{ steps.latest.outputs.patch }}
          
          case "${{ github.event.inputs.bump_type }}" in
            major)
              next_version="v$((major + 1)).0.0"
              ;;
            minor)
              next_version="v${major}.$((minor + 1)).0"
              ;;
            patch)
              next_version="v${major}.${minor}.$((patch + 1))"
              ;;
            *)
              echo "::error::Invalid bump type: ${{ github.event.inputs.bump_type }}. Expected 'major', 'minor', or 'patch'."
              exit 1
              ;;
          esac
          
          echo "next_version=$next_version" >> $GITHUB_OUTPUT
          echo "::info::Calculated next version: $next_version based on bump type: ${{ github.event.inputs.bump_type }}"
        shell: bash

      - name: Create Release Branch
        id: create_branch
        run: |
          NEW_VERSION="${{ steps.version.outputs.next_version }}"
          RELEASE_BRANCH="release/$NEW_VERSION"
          
          # Create release branch from develop
          git checkout develop
          git pull origin develop
          git checkout -b "$RELEASE_BRANCH"
          git push origin "$RELEASE_BRANCH"
          
          echo "release_branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create Pull Request from release branch to main
        run: |
          set -e
          
          NEW_VERSION="${{ steps.version.outputs.next_version }}"
          LATEST_TAG="${{ steps.latest.outputs.latest_tag }}"
          RELEASE_BRANCH="${{ steps.create_branch.outputs.release_branch }}"
          PR_TITLE="Release $NEW_VERSION"
          PR_BODY=$(cat <<EOF
          ## Release Overview
          Automated release PR for version $NEW_VERSION

          **Release Version:** $NEW_VERSION  
          **Previous Version:** $LATEST_TAG  
          **Bump Type:** ${{ github.event.inputs.bump_type }}

          ## Changes Included
          <!-- Please describe the major changes included in this release -->

          ### New Features
          - 

          ### Bug Fixes
          - 

          ### Improvements & Others
          - 

          ## Breaking Changes
          <!-- Please describe breaking changes if any -->
          - [ ] No breaking changes
          - [ ] Breaking changes exist (details below)

          ### Breaking Change Details


          ## Migration Guide
          <!-- Please provide migration steps if there are breaking changes -->

          ## Testing Status
          - [ ] Functional testing completed
          - [ ] Regression testing completed
          - [ ] Performance testing completed
          - [ ] Security testing completed

          ## Pre-release Checklist
          - [ ] Version numbers are correctly updated
          - [ ] Documentation is updated to the latest state
          - [ ] All tests are passing
          - [ ] Dependency vulnerability check completed

          ## Deployment
          - [ ] Staging environment testing completed
          - [ ] Production deployment ready

          ## Post-release Tasks
          - [ ] Publish release notes
          - [ ] Merge back to develop branch

          ---
          ⚠️ **Important**: This PR must be merged using "Create a merge commit". Do not use Squash and merge.

          *Note: This PR merges changes from '$RELEASE_BRANCH' into 'main'. Please review the changes before merging.*
          EOF
          )

          gh auth login --with-token <<< "${{ secrets.RELEASE_WORKFLOW_PAT }}"
  
          gh pr create \
            --base main \
            --head "$RELEASE_BRANCH" \
            --title "$PR_TITLE" \
            --body "$PR_BODY"
        env:
          RELEASE_WORKFLOW_PAT: ${{ secrets.RELEASE_WORKFLOW_PAT }}